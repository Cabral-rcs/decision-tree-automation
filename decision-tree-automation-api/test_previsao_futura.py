#!/usr/bin/env python3
"""
Script para testar com previs√£o futura
"""

import os
import sys
import re
from datetime import datetime, timedelta
import pytz
from dotenv import load_dotenv

# Adiciona o diret√≥rio do backend ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_previsao_futura():
    """Testa com previs√£o futura"""
    try:
        from backend.models.responses_model import SessionLocal, add_response
        from backend.models.alerta_model import Alerta
        from sqlalchemy import text
        
        db = SessionLocal()
        
        # 1. Cria alerta de teste
        novo_alerta = Alerta(
            chat_id="6435800936",
            problema="TESTE PREVIS√ÉO FUTURA - Equipamento apresentando baixa efici√™ncia",
            status='pendente',
            status_operacao='n√£o operando',
            nome_lider='Rafael Cabral',
            codigo="TESTFUT001",
            unidade="Unidade Teste Futura",
            frente="Frente de Teste",
            equipamento="Equipamento Teste",
            tipo_operacao="Teste",
            operacao="Opera√ß√£o de Teste",
            nome_operador="Operador Teste"
        )
        
        db.add(novo_alerta)
        db.commit()
        db.refresh(novo_alerta)
        
        print(f"‚úÖ Alerta criado - ID: {novo_alerta.id}")
        
        # 2. Calcula previs√£o futura (1 hora √† frente)
        now = datetime.now(pytz.timezone('America/Sao_Paulo'))
        previsao_futura = now + timedelta(hours=1)
        previsao_str = previsao_futura.strftime("%H:%M")
        
        print(f"‚è∞ Hor√°rio atual: {now.strftime('%H:%M')}")
        print(f"‚è∞ Previs√£o futura: {previsao_str}")
        
        # 3. Simula webhook com previs√£o futura
        user_id = 6435800936
        nome_lider = "Rafael Cabral"
        resposta = previsao_str
        msg_utc = datetime.now(pytz.UTC)
        tz_br = pytz.timezone('America/Sao_Paulo')
        msg_br = msg_utc.astimezone(tz_br)
        
        print(f"üì± Simulando webhook com previs√£o futura: {resposta}")
        
        # Busca alerta pendente
        alerta = db.query(Alerta).filter(
            Alerta.previsao.is_(None)
        ).order_by(Alerta.criado_em.asc()).first()
        
        if not alerta:
            print("‚ùå Nenhum alerta pendente encontrado")
            return False
        
        print(f"‚úÖ Alerta encontrado: ID {alerta.id}")
        
        # Valida√ß√£o do formato HH:MM
        padrao = r'^(\d{2}):(\d{2})$'
        match = re.match(padrao, resposta)
        if not match:
            print(f"‚ùå Formato inv√°lido: {resposta}")
            return False
        
        # Monta datetime da previs√£o
        hora, minuto = match.groups()
        previsao_dt = msg_br.replace(hour=int(hora), minute=int(minuto), second=0, microsecond=0)
        
        print(f"‚è∞ Previs√£o processada: {resposta} -> {previsao_dt}")
        
        # Atualiza o alerta
        alerta.previsao = resposta
        alerta.previsao_datetime = previsao_dt
        alerta.respondido_em = datetime.now(pytz.UTC)
        alerta.nome_lider = nome_lider
        
        db.commit()
        db.refresh(alerta)
        
        # Verifica se foi salvo
        alerta_atualizado = db.query(Alerta).filter(Alerta.id == alerta.id).first()
        if alerta_atualizado and alerta_atualizado.previsao:
            print(f"‚úÖ Alerta atualizado com sucesso!")
            print(f"   ID: {alerta_atualizado.id}")
            print(f"   Previs√£o: {alerta_atualizado.previsao}")
            print(f"   Previs√£o DateTime: {alerta_atualizado.previsao_datetime}")
            print(f"   Status Opera√ß√£o: {alerta_atualizado.status_operacao}")
        else:
            print("‚ùå Falha ao atualizar alerta")
            return False
        
        # 4. Verifica categoriza√ß√£o
        now_check = datetime.now(pytz.timezone('America/Sao_Paulo'))
        print(f"\nüìä Verificando categoriza√ß√£o:")
        print(f"   Hor√°rio atual: {now_check}")
        print(f"   Previs√£o: {alerta_atualizado.previsao_datetime}")
        print(f"   Status opera√ß√£o: {alerta_atualizado.status_operacao}")
        
        # Aplica a l√≥gica de categoriza√ß√£o
        if not alerta_atualizado.previsao:
            categoria = "pendentes"
        elif alerta_atualizado.status_operacao == 'operando':
            if alerta_atualizado.previsao_datetime >= now_check:
                categoria = "encerradas"
            else:
                categoria = "atrasadas"
        else:
            if alerta_atualizado.previsao_datetime >= now_check:
                categoria = "escaladas"
            else:
                categoria = "atrasadas"
        
        print(f"   Categoria calculada: {categoria}")
        
        # 5. Verifica se est√° correto
        if categoria == "escaladas":
            print("‚úÖ ALERTA FOI PARA 'ESCALADAS' CORRETAMENTE!")
            print("‚úÖ A l√≥gica de categoriza√ß√£o est√° funcionando")
            return True
        else:
            print(f"‚ùå Alerta foi para '{categoria}' em vez de 'escaladas'")
            print("‚ùå Problema na l√≥gica de categoriza√ß√£o")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False
    finally:
        db.close()

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE DE PREVIS√ÉO FUTURA")
    print("=" * 50)
    
    success = test_previsao_futura()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ As respostas do Telegram est√£o sendo armazenadas na coluna Previs√£o")
        print("‚úÖ Os alertas est√£o mudando de categoria automaticamente")
        print("‚úÖ A l√≥gica de categoriza√ß√£o est√° correta")
    else:
        print("‚ùå TESTE FALHOU")
        print("‚ùå H√° problemas na l√≥gica de categoriza√ß√£o")

if __name__ == "__main__":
    load_dotenv()
    main() 