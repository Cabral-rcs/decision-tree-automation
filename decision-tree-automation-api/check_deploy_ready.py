#!/usr/bin/env python3
"""
Script final para verificar se tudo est√° pronto para deploy no Render
"""

import os
import sys

def check_files():
    """Verifica se todos os arquivos necess√°rios existem"""
    print("=== VERIFICA√á√ÉO DE ARQUIVOS ===\n")
    
    required_files = [
        "backend/main.py",
        "backend/config.py",
        "requirements.txt",
        "render.yaml",
        "start.sh",
        "../decision-tree-automation-ui/index.html"
    ]
    
    all_ok = True
    for file_path in required_files:
        exists = os.path.exists(file_path)
        print(f"{'‚úÖ' if exists else '‚ùå'} {file_path}")
        if not exists:
            all_ok = False
    
    print()
    return all_ok

def check_render_config():
    """Verifica a configura√ß√£o do Render"""
    print("=== CONFIGURA√á√ÉO DO RENDER ===\n")
    
    try:
        with open("render.yaml", "r") as f:
            content = f.read()
        
        if "decision-tree-automation-ui/**" in content:
            print("‚úÖ Frontend inclu√≠do no buildFilter")
        else:
            print("‚ùå Frontend N√ÉO inclu√≠do no buildFilter")
            return False
        
        if "decision-tree-automation-api/**" in content:
            print("‚úÖ Backend inclu√≠do no buildFilter")
        else:
            print("‚ùå Backend N√ÉO inclu√≠do no buildFilter")
            return False
        
        print("‚úÖ render.yaml configurado corretamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao ler render.yaml: {e}")
        return False

def check_backend():
    """Verifica se o backend est√° funcionando"""
    print("=== VERIFICA√á√ÉO DO BACKEND ===\n")
    
    try:
        sys.path.append(os.path.dirname(__file__))
        from backend.main import app
        
        print("‚úÖ Backend importado com sucesso")
        
        # Verifica se tem as rotas principais
        routes = [route.path for route in app.routes]
        required_routes = ["/", "/health", "/debug", "/alertas", "/lideres", "/frontend-status"]
        
        for route in required_routes:
            if route in routes:
                print(f"‚úÖ Rota {route} encontrada")
            else:
                print(f"‚ùå Rota {route} N√ÉO encontrada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no backend: {e}")
        return False

def check_frontend():
    """Verifica se o frontend est√° atualizado"""
    print("=== VERIFICA√á√ÉO DO FRONTEND ===\n")
    
    try:
        frontend_path = "../decision-tree-automation-ui/index.html"
        with open(frontend_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # Verifica se tem as meta tags de cache atualizadas
        if "max-age=0" in content and "must-revalidate" in content:
            print("‚úÖ Meta tags de cache configuradas (vers√£o atualizada)")
        else:
            print("‚ùå Meta tags de cache N√ÉO configuradas corretamente")
        
        # Verifica se tem o timestamp atualizado
        if "2024-12-19 16:00:00" in content:
            print("‚úÖ Timestamp de vers√£o encontrado (atualizado)")
        else:
            print("‚ùå Timestamp de vers√£o N√ÉO encontrado ou desatualizado")
        
        # Verifica se tem o JavaScript de verifica√ß√£o de vers√£o
        if "checkFrontendVersion" in content:
            print("‚úÖ Verifica√ß√£o de vers√£o configurada")
        else:
            print("‚ùå Verifica√ß√£o de vers√£o N√ÉO configurada")
        
        # Verifica se tem o listener para Ctrl+F5
        if "addEventListener('keydown'" in content:
            print("‚úÖ Listener Ctrl+F5 configurado")
        else:
            print("‚ùå Listener Ctrl+F5 N√ÉO configurado")
        
        # Verifica se tem os logs de inicializa√ß√£o
        if "Decision Tree Automation - Frontend carregado" in content:
            print("‚úÖ Logs de inicializa√ß√£o configurados")
        else:
            print("‚ùå Logs de inicializa√ß√£o N√ÉO configurados")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar frontend: {e}")
        return False

def check_cache_headers():
    """Verifica se os headers de cache est√£o configurados corretamente"""
    print("=== VERIFICA√á√ÉO DE HEADERS DE CACHE ===\n")
    
    try:
        sys.path.append(os.path.dirname(__file__))
        from backend.main import get_frontend
        
        print("‚úÖ Fun√ß√£o get_frontend importada")
        
        # Verifica se a fun√ß√£o existe e tem os headers corretos
        import inspect
        source = inspect.getsource(get_frontend)
        
        if "max-age=0" in source:
            print("‚úÖ Header max-age=0 configurado")
        else:
            print("‚ùå Header max-age=0 N√ÉO configurado")
        
        if "Thu, 01 Jan 1970 00:00:00 GMT" in source:
            print("‚úÖ Header Expires configurado")
        else:
            print("‚ùå Header Expires N√ÉO configurado")
        
        if "X-Frontend-Timestamp" in source:
            print("‚úÖ Header X-Frontend-Timestamp configurado")
        else:
            print("‚ùå Header X-Frontend-Timestamp N√ÉO configurado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar headers: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ VERIFICA√á√ÉO FINAL PARA DEPLOY NO RENDER\n")
    print("=" * 60 + "\n")
    
    checks = [
        ("Arquivos", check_files),
        ("Configura√ß√£o Render", check_render_config),
        ("Backend", check_backend),
        ("Frontend", check_frontend),
        ("Headers de Cache", check_cache_headers)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"--- {name} ---")
        result = check_func()
        results.append((name, result))
        print()
    
    print("=" * 60)
    print("üèÅ RESUMO FINAL")
    print("=" * 60)
    
    all_passed = True
    for name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{name}: {status}")
        if not result:
            all_passed = False
    
    print()
    if all_passed:
        print("üéâ SISTEMA 100% PRONTO PARA DEPLOY NO RENDER!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Fa√ßa commit de todas as mudan√ßas")
        print("2. Push para o reposit√≥rio")
        print("3. Deploy autom√°tico no Render")
        print("4. Acesse o link do Render")
        print("5. Use Ctrl+F5 para for√ßar refresh se necess√°rio")
        print("6. Verifique /frontend-status para debug")
        print("\nüîß SOLU√á√ïES PARA PROBLEMAS DE CACHE:")
        print("- Use Ctrl+F5 (Windows) ou Cmd+Shift+R (Mac)")
        print("- Acesse /frontend-status para verificar o status")
        print("- O sistema tem auto-refresh a cada 5 minutos")
        print("- Verifica√ß√£o de vers√£o a cada 2 minutos")
    else:
        print("‚ö†Ô∏è  H√Å PROBLEMAS QUE PRECISAM SER CORRIGIDOS ANTES DO DEPLOY")

if __name__ == "__main__":
    main() 