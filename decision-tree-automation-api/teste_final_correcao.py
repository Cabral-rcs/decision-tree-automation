#!/usr/bin/env python3
"""
Teste final da corre√ß√£o: Verifica se alertas de atrasadas podem ser movidos para encerradas
"""

import requests
import json
from datetime import datetime, timedelta
import pytz
import time

def test_final_correcao():
    """Teste final da corre√ß√£o"""
    print("üß™ TESTE FINAL DA CORRE√á√ÉO")
    print("=" * 60)
    
    base_url = "https://decision-tree-automation-1.onrender.com"
    
    # 1. Verificar hor√°rio atual
    print("1Ô∏è‚É£ HOR√ÅRIO ATUAL")
    tz_br = pytz.timezone('America/Sao_Paulo')
    now_br = datetime.now(tz_br)
    print(f"   Hor√°rio atual (BR): {now_br}")
    print()
    
    # 2. Limpar alertas existentes
    print("2Ô∏è‚É£ LIMPANDO ALERTAS EXISTENTES")
    try:
        response = requests.delete(f"{base_url}/alertas/all")
        if response.status_code == 200:
            print("   ‚úÖ Alertas limpos com sucesso")
        else:
            print(f"   ‚ö†Ô∏è Erro ao limpar alertas: {response.status_code}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro ao limpar alertas: {e}")
    print()
    
    # 3. Criar alerta atrasado de teste
    print("3Ô∏è‚É£ CRIANDO ALERTA ATRASADO DE TESTE")
    
    # Cria previs√£o no passado (2 horas atr√°s)
    previsao_passada = now_br - timedelta(hours=2)
    previsao_str = previsao_passada.strftime("%H:%M")
    
    alerta_teste = {
        "chat_id": "6435800936",
        "problema": "[TESTE FINAL] Alerta atrasado para teste de corre√ß√£o",
        "status": "atrasada",
        "status_operacao": "n√£o operando",
        "nome_lider": "Rafael Cabral",
        "previsao": previsao_str,
        "previsao_datetime": previsao_passada.isoformat(),
        "respondido_em": (now_br - timedelta(hours=3)).isoformat(),
        "codigo": "TESTE_FINAL_001"
    }
    
    try:
        response = requests.post(f"{base_url}/alertas", json=alerta_teste)
        if response.status_code == 200:
            alerta_id = response.json().get("id")
            print(f"   ‚úÖ Alerta criado com ID: {alerta_id}")
            print(f"   üìÖ Previs√£o: {previsao_str} (h√° 2 horas)")
            print(f"   ‚è∞ Status: n√£o operando")
        else:
            print(f"   ‚ùå Erro ao criar alerta: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro ao criar alerta: {e}")
        return
    print()
    
    # 4. Verificar categoriza√ß√£o inicial
    print("4Ô∏è‚É£ VERIFICANDO CATEGORIZA√á√ÉO INICIAL")
    try:
        response = requests.get(f"{base_url}/alertas")
        if response.status_code == 200:
            data = response.json()
            
            pendentes = len(data.get("pendentes", []))
            escaladas = len(data.get("escaladas", []))
            atrasadas = len(data.get("atrasadas", []))
            encerradas = len(data.get("encerradas", []))
            
            print(f"   üìä Categoriza√ß√£o inicial:")
            print(f"      - Pendentes: {pendentes}")
            print(f"      - Escaladas: {escaladas}")
            print(f"      - Atrasadas: {atrasadas}")
            print(f"      - Encerradas: {encerradas}")
            
            # Verifica se o alerta est√° em atrasadas
            alerta_encontrado = None
            for alerta in data.get("atrasadas", []):
                if alerta.get("codigo") == "TESTE_FINAL_001":
                    alerta_encontrado = alerta
                    break
            
            if alerta_encontrado:
                print("   ‚úÖ Alerta encontrado na categoria 'Atrasadas'")
                print(f"      Problema: {alerta_encontrado.get('problema')}")
                print(f"      Previs√£o: {alerta_encontrado.get('previsao')}")
                print(f"      Status: {alerta_encontrado.get('status_operacao')}")
            else:
                print("   ‚ùå Alerta n√£o encontrado na categoria 'Atrasadas'")
                return
        else:
            print(f"   ‚ùå Erro ao listar alertas: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro ao listar alertas: {e}")
        return
    print()
    
    # 5. Mudar status para operando
    print("5Ô∏è‚É£ MUDANDO STATUS PARA OPERANDO")
    try:
        response = requests.put(f"{base_url}/alertas/{alerta_id}/status", 
                              json={"status_operacao": "operando"})
        if response.status_code == 200:
            print("   ‚úÖ Status alterado para 'operando'")
            print(f"   Resposta: {response.json()}")
        else:
            print(f"   ‚ùå Erro ao alterar status: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro ao alterar status: {e}")
        return
    print()
    
    # 6. Aguardar um pouco para processamento
    print("6Ô∏è‚É£ AGUARDANDO PROCESSAMENTO")
    time.sleep(2)
    print("   ‚úÖ Aguardado 2 segundos")
    print()
    
    # 7. Verificar categoriza√ß√£o ap√≥s mudan√ßa
    print("7Ô∏è‚É£ VERIFICANDO CATEGORIZA√á√ÉO AP√ìS MUDAN√áA")
    try:
        response = requests.get(f"{base_url}/alertas")
        if response.status_code == 200:
            data = response.json()
            
            pendentes = len(data.get("pendentes", []))
            escaladas = len(data.get("escaladas", []))
            atrasadas = len(data.get("atrasadas", []))
            encerradas = len(data.get("encerradas", []))
            
            print(f"   üìä Categoriza√ß√£o ap√≥s mudan√ßa:")
            print(f"      - Pendentes: {pendentes}")
            print(f"      - Escaladas: {escaladas}")
            print(f"      - Atrasadas: {atrasadas}")
            print(f"      - Encerradas: {encerradas}")
            
            # Verifica se o alerta foi movido para encerradas
            alerta_encontrado = None
            for alerta in data.get("encerradas", []):
                if alerta.get("codigo") == "TESTE_FINAL_001":
                    alerta_encontrado = alerta
                    break
            
            if alerta_encontrado:
                print("   ‚úÖ Alerta movido para categoria 'Encerradas'")
                print(f"      Problema: {alerta_encontrado.get('problema')}")
                print(f"      Status: {alerta_encontrado.get('status_operacao')}")
                print(f"      Hor√°rio operando: {alerta_encontrado.get('horario_operando')}")
                print(f"      Origem encerramento: {alerta_encontrado.get('origem_encerramento')}")
                
                # Verifica se a origem est√° correta
                if alerta_encontrado.get('origem_encerramento') == 'atrasada':
                    print("   ‚úÖ Origem corretamente definida como 'atrasada'")
                    print("   ‚úÖ No frontend ser√° exibido com texto vermelho")
                else:
                    print(f"   ‚ùå Origem incorreta: {alerta_encontrado.get('origem_encerramento')}")
            else:
                print("   ‚ùå Alerta n√£o foi movido para 'Encerradas'")
                return
        else:
            print(f"   ‚ùå Erro ao listar alertas: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro ao listar alertas: {e}")
        return
    print()
    
    # 8. Verificar se ainda est√° em atrasadas
    print("8Ô∏è‚É£ VERIFICANDO SE AINDA EST√Å EM ATRASADAS")
    try:
        response = requests.get(f"{base_url}/alertas")
        if response.status_code == 200:
            data = response.json()
            
            # Verifica se o alerta ainda est√° em atrasadas
            alerta_ainda_atrasado = False
            for alerta in data.get("atrasadas", []):
                if alerta.get("codigo") == "TESTE_FINAL_001":
                    alerta_ainda_atrasado = True
                    break
            
            if alerta_ainda_atrasado:
                print("   ‚ùå Alerta ainda est√° em 'Atrasadas' - CORRE√á√ÉO N√ÉO FUNCIONOU")
                return
            else:
                print("   ‚úÖ Alerta n√£o est√° mais em 'Atrasadas' - CORRE√á√ÉO FUNCIONOU")
        else:
            print(f"   ‚ùå Erro ao listar alertas: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro ao listar alertas: {e}")
        return
    print()
    
    # 9. Resumo final
    print("=" * 60)
    print("üìã RESUMO DO TESTE FINAL")
    print("‚úÖ Alerta atrasado criado com sucesso")
    print("‚úÖ Categoriza√ß√£o inicial correta (em Atrasadas)")
    print("‚úÖ Status alterado para 'operando'")
    print("‚úÖ Alerta movido para 'Encerradas'")
    print("‚úÖ Origem corretamente definida como 'atrasada'")
    print("‚úÖ Alerta n√£o est√° mais em 'Atrasadas'")
    print("‚úÖ Corre√ß√£o implementada com sucesso!")
    print()
    print("üéØ RESULTADO: A corre√ß√£o est√° funcionando perfeitamente!")
    print("   - Alertas de atrasadas podem ser movidos para encerradas")
    print("   - Bot√£o de status funciona corretamente")
    print("   - Categoriza√ß√£o baseada em previs√£o e status_operacao")
    print("   - Identifica√ß√£o visual por origem funcionando")
    print("üèÅ TESTE FINAL CONCLU√çDO COM SUCESSO!")

if __name__ == "__main__":
    test_final_correcao() 