# telegram_webhook.py - Controller para integra√ß√£o com o bot do Telegram
from fastapi import Request
from backend.models.responses_model import add_response, SessionLocal
from backend.models.alerta_model import Alerta
from datetime import datetime
from backend.controllers.telegram_scheduler import enviar_pergunta_para_usuario
import pytz
import re
from backend.config import TELEGRAM_API_URL
import requests
import logging

# Configurar logging
logger = logging.getLogger(__name__)

# Fun√ß√£o para processar webhooks do Telegram
async def telegram_webhook(request: Request):
    """Processa webhooks do Telegram"""
    try:
        data = await request.json()
        logger.info(f'Webhook recebido: {data}')
        print(f'üîî WEBHOOK RECEBIDO: {data}')  # Log para debug
        
        # Verifica se √© uma mensagem v√°lida
        if 'message' not in data:
            logger.warning('Webhook n√£o cont√©m mensagem')
            return {"status": "ignored", "msg": "N√£o √© uma mensagem"}
        
        message = data.get('message', {})
        user_id = message.get('from', {}).get('id')
        nome_lider = message.get('from', {}).get('first_name', '')
        if message.get('from', {}).get('last_name'):
            nome_lider += ' ' + message['from']['last_name']
        
        # Data da mensagem em UTC
        msg_utc = datetime.utcfromtimestamp(message.get('date')) if message.get('date') else None
        # Converter para hor√°rio de Bras√≠lia
        tz_br = pytz.timezone('America/Sao_Paulo')
        msg_br = msg_utc.replace(tzinfo=pytz.utc).astimezone(tz_br) if msg_utc else None
        resposta = message.get('text') or '[outro tipo de mensagem]'
        
        logger.info(f'Processando mensagem de {nome_lider} (ID: {user_id}): {resposta}')
        print(f'üì± Processando: {nome_lider} ({user_id}) -> {resposta}')
        
        # Verifica se √© o Rafael Cabral
        if 'Rafael' not in nome_lider and 'Cabral' not in nome_lider:
            logger.info(f'Mensagem ignorada - n√£o √© do Rafael Cabral: {nome_lider}')
            return {"status": "ignored", "msg": "N√£o √© do l√≠der autorizado"}
        
        db = SessionLocal()
        try:
            # Busca alerta pendente (sem prazo) - mais flex√≠vel
            alerta = db.query(Alerta).filter(
                Alerta.prazo.is_(None)
            ).order_by(Alerta.criado_em.asc()).first()
            
            if not alerta:
                logger.warning('Nenhum alerta pendente encontrado')
                print('‚ö†Ô∏è  Nenhum alerta pendente encontrado')
                
                # Verifica se h√° alertas no sistema
                total_alertas = db.query(Alerta).count()
                logger.info(f'Total de alertas no sistema: {total_alertas}')
                print(f'üìä Total de alertas no sistema: {total_alertas}')
                
                # Envia mensagem informando que n√£o h√° alertas pendentes
                payload = {
                    'chat_id': user_id,
                    'text': 'N√£o h√° alertas pendentes aguardando prazo no momento.'
                }
                requests.post(f'{TELEGRAM_API_URL}/sendMessage', data=payload)
                return {"status": "no_pending", "msg": "Nenhum alerta pendente"}
            
            logger.info(f'Alerta encontrado: ID {alerta.id}, Problema: {alerta.problema[:50]}...')
            print(f'üéØ Alerta encontrado: ID {alerta.id}')
            
            # Valida√ß√£o do padr√£o HH:MM
            padrao = r'^(\d{2}):(\d{2})$'
            match = re.match(padrao, resposta)
            if not match:
                logger.warning(f'Formato inv√°lido de resposta: {resposta}')
                print(f'‚ùå Formato inv√°lido: {resposta}')
                
                # Pede novamente com instru√ß√µes claras
                payload = {
                    'chat_id': user_id,
                    'text': f'Por favor, informe a previs√£o apenas no formato HH:MM (ex: 15:30).\n\nAlerta: {alerta.problema[:100]}...'
                }
                requests.post(f'{TELEGRAM_API_URL}/sendMessage', data=payload)
                return {"status": "invalid_format", "msg": "Formato inv√°lido"}
            
            # Montar datetime da previs√£o para o mesmo dia da resposta
            hora, minuto = match.groups()
            previsao_dt = msg_br.replace(hour=int(hora), minute=int(minuto), second=0, microsecond=0)
            
            logger.info(f'Prazo processado: {resposta} -> {previsao_dt}')
            print(f'‚è∞ Prazo processado: {resposta} -> {previsao_dt}')
            
            # Atualiza o alerta com a previs√£o e prazo
            logger.info(f'Atualizando alerta {alerta.id} com resposta: {resposta}')
            print(f'üîÑ Atualizando alerta {alerta.id} com resposta: {resposta}')
            
            alerta.previsao = resposta
            alerta.previsao_datetime = previsao_dt
            alerta.prazo = previsao_dt  # Campo prazo preenchido pelo l√≠der
            alerta.respondido_em = datetime.utcnow()
            alerta.nome_lider = nome_lider
            
            # For√ßa o commit e verifica se foi salvo
            db.commit()
            db.refresh(alerta)  # Recarrega o objeto do banco
            
            # Verifica se a atualiza√ß√£o foi bem-sucedida
            alerta_atualizado = db.query(Alerta).filter(Alerta.id == alerta.id).first()
            if alerta_atualizado and alerta_atualizado.prazo:
                logger.info(f'‚úÖ Alerta {alerta.id} atualizado com sucesso - Prazo: {alerta_atualizado.prazo}')
                print(f'‚úÖ Alerta {alerta.id} atualizado com sucesso - Prazo: {alerta_atualizado.prazo}')
            else:
                logger.error(f'‚ùå Falha ao atualizar alerta {alerta.id}')
                print(f'‚ùå Falha ao atualizar alerta {alerta.id}')
                raise Exception("Falha ao salvar prazo no banco de dados")
            
            # Confirma√ß√£o para o l√≠der
            payload = {
                'chat_id': user_id,
                'text': f'‚úÖ Prazo registrado: {resposta}\n\nAlerta: {alerta.problema[:100]}...\n\nO alerta ser√° monitorado at√© este hor√°rio.'
            }
            resp_telegram = requests.post(f'{TELEGRAM_API_URL}/sendMessage', data=payload, timeout=10)
            if resp_telegram.ok:
                logger.info(f'Confirma√ß√£o enviada para {user_id}')
                print(f'üì§ Confirma√ß√£o enviada')
            else:
                logger.error(f'Erro ao enviar confirma√ß√£o: {resp_telegram.status_code}')
                print(f'‚ùå Erro ao enviar confirma√ß√£o')
            
            # Armazena tamb√©m como resposta geral (opcional)
            if user_id and resposta and msg_utc:
                add_response({
                    'user_id': str(user_id),
                    'pergunta': alerta.problema,
                    'resposta': resposta,
                    'timestamp': msg_utc.isoformat()
                })
            
            return {"status": "success", "msg": "Prazo registrado com sucesso"}
            
        except Exception as e:
            logger.error(f'Erro ao processar alerta: {str(e)}')
            print(f'‚ùå Erro ao processar alerta: {str(e)}')
            
            # Envia mensagem de erro para o usu√°rio
            try:
                payload = {
                    'chat_id': user_id,
                    'text': '‚ùå Erro interno ao processar sua resposta. Tente novamente.'
                }
                requests.post(f'{TELEGRAM_API_URL}/sendMessage', data=payload)
            except:
                pass
            
            return {"status": "error", "msg": str(e)}
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f'Erro geral no webhook: {str(e)}')
        print(f'‚ùå Erro geral no webhook: {str(e)}')
        return {"status": "error", "msg": str(e)} 